#!/bin/bash

set -eou pipefail
set -x

TMUX_VERSION=3.2a
CMAKE_VERSION=3.22.0

PKG_MANAGER=
PKG_MGR="apt yum brew"
for pkg in $PKG_MGR;
do
  command -v $pkg &>/dev/null || true
  if [[ $? -eq 0 ]]; then
    PKG_MANAGER=$pkg
  fi
done

if [[ ${PKG_MANAGER} = '' ]]; then
  echo "Missing package manager. Supported package managers: ['yum', 'apt', 'brew']"
	exit 1
fi

if [[ "${PKG_MANAGER}" != "brew" ]]; then
	PKG_MANAGER="sudo ${PKG_MANAGER}"
fi

echo "Found ${PKG_MANAGER} as package manager."

# Install NodeJS
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash &>/dev/null
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &>/dev/null
nvm install 16.13.0 &>/dev/null

if [[ "$OSTYPE" =~ ^darwin ]]; then
  brew install rust wget zsh xsel python ipython &>/dev/null
else
  if [[ "${PKG_MANAGER}" = "sudo yum" ]]; then
    ${PKG_MANAGER} install -y cargo zsh wget libevent-devel ncurses-devel openssl-devel python3 &>/dev/null
  else
    ${PKG_MANAGER} install -y cargo zsh wget libevent-dev libncurses-dev libssl-devel python3.9 &>/dev/null
  fi
fi

if [[ ! -d "/opt/local/bin" ]]; then
  sudo mkdir -p /opt/local/bin
fi

sudo chown $(id -u):$(id -g) /opt/local/bin

# Antibody plugin manager for shell
curl -sfL git.io/antibody | sh -s - -b /opt/local/bin &>/dev/null

# Delete existing antibody binary/symbolic link
sudo rm -rf /usr/local/bin/antibody

# Sym link antibody into /usr/local/bin
sudo ln -s /opt/local/bin/antibody /usr/local/bin/antibody

# Install tmux
if [[ "$OSTYPE" =~ ^darwin ]]; then
  brew install tmux &>/dev/null
else
  git clone https://github.com/tmux/tmux.git tmux-build &>/dev/null
  cd tmux-build
  git checkout tags/${TMUX_VERSION} &>/dev/null
  sh autogen.sh &>/dev/null
  ./configure &>/dev/null && make -j8 &>/dev/null
  sudo make install &>/dev/null
  cd .. && rm -rf tmux-build
fi

# Install cmake
if [[ "$OSTYPE" =~ ^darwin ]]; then
  brew install cmake &>/dev/null
else
  wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz &>/dev/null
  tar xvf cmake-${CMAKE_VERSION}.tar.gz &>/dev/null
  rm -rf cmake-${CMAKE_VERSION}.tar.gz
  cd cmake-${CMAKE_VERSION}
  ./bootstrap --parallel=8 &>/dev/null
  make -j8 &>/dev/null
  sudo make install &>/dev/null
  cd .. && rm -rf cmake-${CMAKE_VERSION}
fi

# Install neovim
if [[ "$OSTYPE" =~ ^darwin ]]; then
  brew install neovim &>/dev/null
else
	git clone https://github.com/neovim/neovim &>/dev/null
	cd neovim && git checkout v0.5.1 &>/dev/null
	make -j8 &>/dev/null && sudo make install &>/dev/null
  cd .. && rm -rf neovim
fi

sudo npm install -g neovim &>/dev/null
sudo pip3 install neovim &>/dev/null

# Install ripgrep
git clone https://github.com/BurntSushi/ripgrep &>/dev/null
cd ripgrep
cargo build --release &>/dev/null
sudo rm -rf /usr/local/bin/rg
sudo mv ./target/release/rg /usr/local/bin/
cd .. && rm -rf ripgrep

# Install exa
cargo install exa &>/dev/null
